// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics_bridge_records.proto

package org.chromium.android_webview.proto;

public final class MetricsBridgeRecords {
  private MetricsBridgeRecords() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface HistogramRecordOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.chromium.android_webview.proto.HistogramRecord)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     * @return The enum numeric value on the wire for recordType.
     */
    int getRecordTypeValue();
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     * @return The recordType.
     */
    org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType getRecordType();

    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     * @return The histogramName.
     */
    java.lang.String getHistogramName();
    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     * @return The bytes for histogramName.
     */
    com.google.protobuf.ByteString
        getHistogramNameBytes();

    /**
     * <pre>
     * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
     * and 1 for true.
     * </pre>
     *
     * <code>int32 sample = 3;</code>
     * @return The sample.
     */
    int getSample();

    /**
     * <pre>
     * the smallest value recorded in the first bucket; should be greater than
     * zero.
     * </pre>
     *
     * <code>int32 min = 4;</code>
     * @return The min.
     */
    int getMin();

    /**
     * <pre>
     * the smallest value recorded in the overflow bucket.
     * </pre>
     *
     * <code>int32 max = 5;</code>
     * @return The max.
     */
    int getMax();

    /**
     * <pre>
     * number of histogram buckets: Two buckets are used for underflow and
     * overflow, and the remaining buckets cover the range [min, max);
     * numBuckets should be 100 or less.
     * </pre>
     *
     * <code>int32 num_buckets = 6;</code>
     * @return The numBuckets.
     */
    int getNumBuckets();

    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     * @return Whether the metadata field is set.
     */
    boolean hasMetadata();
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     * @return The metadata.
     */
    org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata getMetadata();

    /**
     * <pre>
     * Used for |record_type| == USER_ACTION only.
     * </pre>
     *
     * <code>int64 elapsed_realtime_millis = 8;</code>
     * @return The elapsedRealtimeMillis.
     */
    long getElapsedRealtimeMillis();
  }
  /**
   * <pre>
   * WebView uses HistogramRecord to serialize a histogram record that
   * MetricsBridgeService receives to a file and retrieve it back. These
   * histogram records are recorded in non-embedded WebView processes.
   * Next tag: 9
   * </pre>
   *
   * Protobuf type {@code org.chromium.android_webview.proto.HistogramRecord}
   */
  public  static final class HistogramRecord extends
      com.google.protobuf.GeneratedMessageLite<
          HistogramRecord, HistogramRecord.Builder> implements
      // @@protoc_insertion_point(message_implements:org.chromium.android_webview.proto.HistogramRecord)
      HistogramRecordOrBuilder {
    private HistogramRecord() {
      histogramName_ = "";
    }
    /**
     * <pre>
     * Next tag: 5
     * </pre>
     *
     * Protobuf enum {@code org.chromium.android_webview.proto.HistogramRecord.RecordType}
     */
    public enum RecordType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>HISTOGRAM_BOOLEAN = 0;</code>
       */
      HISTOGRAM_BOOLEAN(0),
      /**
       * <code>HISTOGRAM_EXPONENTIAL = 1;</code>
       */
      HISTOGRAM_EXPONENTIAL(1),
      /**
       * <code>HISTOGRAM_LINEAR = 2;</code>
       */
      HISTOGRAM_LINEAR(2),
      /**
       * <code>HISTOGRAM_SPARSE = 3;</code>
       */
      HISTOGRAM_SPARSE(3),
      /**
       * <code>USER_ACTION = 4;</code>
       */
      USER_ACTION(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>HISTOGRAM_BOOLEAN = 0;</code>
       */
      public static final int HISTOGRAM_BOOLEAN_VALUE = 0;
      /**
       * <code>HISTOGRAM_EXPONENTIAL = 1;</code>
       */
      public static final int HISTOGRAM_EXPONENTIAL_VALUE = 1;
      /**
       * <code>HISTOGRAM_LINEAR = 2;</code>
       */
      public static final int HISTOGRAM_LINEAR_VALUE = 2;
      /**
       * <code>HISTOGRAM_SPARSE = 3;</code>
       */
      public static final int HISTOGRAM_SPARSE_VALUE = 3;
      /**
       * <code>USER_ACTION = 4;</code>
       */
      public static final int USER_ACTION_VALUE = 4;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RecordType valueOf(int value) {
        return forNumber(value);
      }

      public static RecordType forNumber(int value) {
        switch (value) {
          case 0: return HISTOGRAM_BOOLEAN;
          case 1: return HISTOGRAM_EXPONENTIAL;
          case 2: return HISTOGRAM_LINEAR;
          case 3: return HISTOGRAM_SPARSE;
          case 4: return USER_ACTION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RecordType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RecordType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RecordType>() {
              @java.lang.Override
              public RecordType findValueByNumber(int number) {
                return RecordType.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return RecordTypeVerifier.INSTANCE;
      }

      private static final class RecordTypeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new RecordTypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return RecordType.forNumber(number) != null;
              }
            };

      private final int value;

      private RecordType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.chromium.android_webview.proto.HistogramRecord.RecordType)
    }

    public interface MetadataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.chromium.android_webview.proto.HistogramRecord.Metadata)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The time in millis when the histogram is received by the
       * AwNonEmbeddedUmaRecorder
       * </pre>
       *
       * <code>int64 time_recorded = 1;</code>
       * @return The timeRecorded.
       */
      long getTimeRecorded();
    }
    /**
     * <pre>
     * Metadata for the histogram record.
     * Next tag: 2
     * </pre>
     *
     * Protobuf type {@code org.chromium.android_webview.proto.HistogramRecord.Metadata}
     */
    public  static final class Metadata extends
        com.google.protobuf.GeneratedMessageLite<
            Metadata, Metadata.Builder> implements
        // @@protoc_insertion_point(message_implements:org.chromium.android_webview.proto.HistogramRecord.Metadata)
        MetadataOrBuilder {
      private Metadata() {
      }
      public static final int TIME_RECORDED_FIELD_NUMBER = 1;
      private long timeRecorded_;
      /**
       * <pre>
       * The time in millis when the histogram is received by the
       * AwNonEmbeddedUmaRecorder
       * </pre>
       *
       * <code>int64 time_recorded = 1;</code>
       * @return The timeRecorded.
       */
      @java.lang.Override
      public long getTimeRecorded() {
        return timeRecorded_;
      }
      /**
       * <pre>
       * The time in millis when the histogram is received by the
       * AwNonEmbeddedUmaRecorder
       * </pre>
       *
       * <code>int64 time_recorded = 1;</code>
       * @param value The timeRecorded to set.
       */
      private void setTimeRecorded(long value) {
        
        timeRecorded_ = value;
      }
      /**
       * <pre>
       * The time in millis when the histogram is received by the
       * AwNonEmbeddedUmaRecorder
       * </pre>
       *
       * <code>int64 time_recorded = 1;</code>
       */
      private void clearTimeRecorded() {
        
        timeRecorded_ = 0L;
      }

      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Metadata for the histogram record.
       * Next tag: 2
       * </pre>
       *
       * Protobuf type {@code org.chromium.android_webview.proto.HistogramRecord.Metadata}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata, Builder> implements
          // @@protoc_insertion_point(builder_implements:org.chromium.android_webview.proto.HistogramRecord.Metadata)
          org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.MetadataOrBuilder {
        // Construct using org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The time in millis when the histogram is received by the
         * AwNonEmbeddedUmaRecorder
         * </pre>
         *
         * <code>int64 time_recorded = 1;</code>
         * @return The timeRecorded.
         */
        @java.lang.Override
        public long getTimeRecorded() {
          return instance.getTimeRecorded();
        }
        /**
         * <pre>
         * The time in millis when the histogram is received by the
         * AwNonEmbeddedUmaRecorder
         * </pre>
         *
         * <code>int64 time_recorded = 1;</code>
         * @param value The timeRecorded to set.
         * @return This builder for chaining.
         */
        public Builder setTimeRecorded(long value) {
          copyOnWrite();
          instance.setTimeRecorded(value);
          return this;
        }
        /**
         * <pre>
         * The time in millis when the histogram is received by the
         * AwNonEmbeddedUmaRecorder
         * </pre>
         *
         * <code>int64 time_recorded = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimeRecorded() {
          copyOnWrite();
          instance.clearTimeRecorded();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.chromium.android_webview.proto.HistogramRecord.Metadata)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "timeRecorded_",
              };
              java.lang.String info =
                  "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:org.chromium.android_webview.proto.HistogramRecord.Metadata)
      private static final org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata DEFAULT_INSTANCE;
      static {
        Metadata defaultInstance = new Metadata();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Metadata.class, defaultInstance);
      }

      public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Metadata> PARSER;

      public static com.google.protobuf.Parser<Metadata> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public static final int RECORD_TYPE_FIELD_NUMBER = 1;
    private int recordType_;
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     * @return The enum numeric value on the wire for recordType.
     */
    @java.lang.Override
    public int getRecordTypeValue() {
      return recordType_;
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     * @return The recordType.
     */
    @java.lang.Override
    public org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType getRecordType() {
      org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType result = org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType.forNumber(recordType_);
      return result == null ? org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType.UNRECOGNIZED : result;
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     * @param value The enum numeric value on the wire for recordType to set.
     */
    private void setRecordTypeValue(int value) {
        recordType_ = value;
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     * @param value The recordType to set.
     */
    private void setRecordType(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType value) {
      recordType_ = value.getNumber();
      
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
     */
    private void clearRecordType() {
      
      recordType_ = 0;
    }

    public static final int HISTOGRAM_NAME_FIELD_NUMBER = 2;
    private java.lang.String histogramName_;
    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     * @return The histogramName.
     */
    @java.lang.Override
    public java.lang.String getHistogramName() {
      return histogramName_;
    }
    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     * @return The bytes for histogramName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHistogramNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(histogramName_);
    }
    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     * @param value The histogramName to set.
     */
    private void setHistogramName(
        java.lang.String value) {
      value.getClass();
  
      histogramName_ = value;
    }
    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     */
    private void clearHistogramName() {
      
      histogramName_ = getDefaultInstance().getHistogramName();
    }
    /**
     * <pre>
     * The name of the histogram
     * </pre>
     *
     * <code>string histogram_name = 2;</code>
     * @param value The bytes for histogramName to set.
     */
    private void setHistogramNameBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      histogramName_ = value.toStringUtf8();
      
    }

    public static final int SAMPLE_FIELD_NUMBER = 3;
    private int sample_;
    /**
     * <pre>
     * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
     * and 1 for true.
     * </pre>
     *
     * <code>int32 sample = 3;</code>
     * @return The sample.
     */
    @java.lang.Override
    public int getSample() {
      return sample_;
    }
    /**
     * <pre>
     * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
     * and 1 for true.
     * </pre>
     *
     * <code>int32 sample = 3;</code>
     * @param value The sample to set.
     */
    private void setSample(int value) {
      
      sample_ = value;
    }
    /**
     * <pre>
     * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
     * and 1 for true.
     * </pre>
     *
     * <code>int32 sample = 3;</code>
     */
    private void clearSample() {
      
      sample_ = 0;
    }

    public static final int MIN_FIELD_NUMBER = 4;
    private int min_;
    /**
     * <pre>
     * the smallest value recorded in the first bucket; should be greater than
     * zero.
     * </pre>
     *
     * <code>int32 min = 4;</code>
     * @return The min.
     */
    @java.lang.Override
    public int getMin() {
      return min_;
    }
    /**
     * <pre>
     * the smallest value recorded in the first bucket; should be greater than
     * zero.
     * </pre>
     *
     * <code>int32 min = 4;</code>
     * @param value The min to set.
     */
    private void setMin(int value) {
      
      min_ = value;
    }
    /**
     * <pre>
     * the smallest value recorded in the first bucket; should be greater than
     * zero.
     * </pre>
     *
     * <code>int32 min = 4;</code>
     */
    private void clearMin() {
      
      min_ = 0;
    }

    public static final int MAX_FIELD_NUMBER = 5;
    private int max_;
    /**
     * <pre>
     * the smallest value recorded in the overflow bucket.
     * </pre>
     *
     * <code>int32 max = 5;</code>
     * @return The max.
     */
    @java.lang.Override
    public int getMax() {
      return max_;
    }
    /**
     * <pre>
     * the smallest value recorded in the overflow bucket.
     * </pre>
     *
     * <code>int32 max = 5;</code>
     * @param value The max to set.
     */
    private void setMax(int value) {
      
      max_ = value;
    }
    /**
     * <pre>
     * the smallest value recorded in the overflow bucket.
     * </pre>
     *
     * <code>int32 max = 5;</code>
     */
    private void clearMax() {
      
      max_ = 0;
    }

    public static final int NUM_BUCKETS_FIELD_NUMBER = 6;
    private int numBuckets_;
    /**
     * <pre>
     * number of histogram buckets: Two buckets are used for underflow and
     * overflow, and the remaining buckets cover the range [min, max);
     * numBuckets should be 100 or less.
     * </pre>
     *
     * <code>int32 num_buckets = 6;</code>
     * @return The numBuckets.
     */
    @java.lang.Override
    public int getNumBuckets() {
      return numBuckets_;
    }
    /**
     * <pre>
     * number of histogram buckets: Two buckets are used for underflow and
     * overflow, and the remaining buckets cover the range [min, max);
     * numBuckets should be 100 or less.
     * </pre>
     *
     * <code>int32 num_buckets = 6;</code>
     * @param value The numBuckets to set.
     */
    private void setNumBuckets(int value) {
      
      numBuckets_ = value;
    }
    /**
     * <pre>
     * number of histogram buckets: Two buckets are used for underflow and
     * overflow, and the remaining buckets cover the range [min, max);
     * numBuckets should be 100 or less.
     * </pre>
     *
     * <code>int32 num_buckets = 6;</code>
     */
    private void clearNumBuckets() {
      
      numBuckets_ = 0;
    }

    public static final int METADATA_FIELD_NUMBER = 7;
    private org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata metadata_;
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     */
    @java.lang.Override
    public boolean hasMetadata() {
      return metadata_ != null;
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     */
    @java.lang.Override
    public org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata getMetadata() {
      return metadata_ == null ? org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.getDefaultInstance() : metadata_;
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     */
    private void setMetadata(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata value) {
      value.getClass();
  metadata_ = value;
      
      }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeMetadata(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata value) {
      value.getClass();
  if (metadata_ != null &&
          metadata_ != org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.getDefaultInstance()) {
        metadata_ =
          org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
      } else {
        metadata_ = value;
      }
      
    }
    /**
     * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
     */
    private void clearMetadata() {  metadata_ = null;
      
    }

    public static final int ELAPSED_REALTIME_MILLIS_FIELD_NUMBER = 8;
    private long elapsedRealtimeMillis_;
    /**
     * <pre>
     * Used for |record_type| == USER_ACTION only.
     * </pre>
     *
     * <code>int64 elapsed_realtime_millis = 8;</code>
     * @return The elapsedRealtimeMillis.
     */
    @java.lang.Override
    public long getElapsedRealtimeMillis() {
      return elapsedRealtimeMillis_;
    }
    /**
     * <pre>
     * Used for |record_type| == USER_ACTION only.
     * </pre>
     *
     * <code>int64 elapsed_realtime_millis = 8;</code>
     * @param value The elapsedRealtimeMillis to set.
     */
    private void setElapsedRealtimeMillis(long value) {
      
      elapsedRealtimeMillis_ = value;
    }
    /**
     * <pre>
     * Used for |record_type| == USER_ACTION only.
     * </pre>
     *
     * <code>int64 elapsed_realtime_millis = 8;</code>
     */
    private void clearElapsedRealtimeMillis() {
      
      elapsedRealtimeMillis_ = 0L;
    }

    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * WebView uses HistogramRecord to serialize a histogram record that
     * MetricsBridgeService receives to a file and retrieve it back. These
     * histogram records are recorded in non-embedded WebView processes.
     * Next tag: 9
     * </pre>
     *
     * Protobuf type {@code org.chromium.android_webview.proto.HistogramRecord}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.chromium.android_webview.proto.HistogramRecord)
        org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecordOrBuilder {
      // Construct using org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
       * @return The enum numeric value on the wire for recordType.
       */
      @java.lang.Override
      public int getRecordTypeValue() {
        return instance.getRecordTypeValue();
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
       * @param value The recordType to set.
       * @return This builder for chaining.
       */
      public Builder setRecordTypeValue(int value) {
        copyOnWrite();
        instance.setRecordTypeValue(value);
        return this;
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
       * @return The recordType.
       */
      @java.lang.Override
      public org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType getRecordType() {
        return instance.getRecordType();
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
       * @param value The enum numeric value on the wire for recordType to set.
       * @return This builder for chaining.
       */
      public Builder setRecordType(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType value) {
        copyOnWrite();
        instance.setRecordType(value);
        return this;
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRecordType() {
        copyOnWrite();
        instance.clearRecordType();
        return this;
      }

      /**
       * <pre>
       * The name of the histogram
       * </pre>
       *
       * <code>string histogram_name = 2;</code>
       * @return The histogramName.
       */
      @java.lang.Override
      public java.lang.String getHistogramName() {
        return instance.getHistogramName();
      }
      /**
       * <pre>
       * The name of the histogram
       * </pre>
       *
       * <code>string histogram_name = 2;</code>
       * @return The bytes for histogramName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getHistogramNameBytes() {
        return instance.getHistogramNameBytes();
      }
      /**
       * <pre>
       * The name of the histogram
       * </pre>
       *
       * <code>string histogram_name = 2;</code>
       * @param value The histogramName to set.
       * @return This builder for chaining.
       */
      public Builder setHistogramName(
          java.lang.String value) {
        copyOnWrite();
        instance.setHistogramName(value);
        return this;
      }
      /**
       * <pre>
       * The name of the histogram
       * </pre>
       *
       * <code>string histogram_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHistogramName() {
        copyOnWrite();
        instance.clearHistogramName();
        return this;
      }
      /**
       * <pre>
       * The name of the histogram
       * </pre>
       *
       * <code>string histogram_name = 2;</code>
       * @param value The bytes for histogramName to set.
       * @return This builder for chaining.
       */
      public Builder setHistogramNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHistogramNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
       * and 1 for true.
       * </pre>
       *
       * <code>int32 sample = 3;</code>
       * @return The sample.
       */
      @java.lang.Override
      public int getSample() {
        return instance.getSample();
      }
      /**
       * <pre>
       * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
       * and 1 for true.
       * </pre>
       *
       * <code>int32 sample = 3;</code>
       * @param value The sample to set.
       * @return This builder for chaining.
       */
      public Builder setSample(int value) {
        copyOnWrite();
        instance.setSample(value);
        return this;
      }
      /**
       * <pre>
       * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
       * and 1 for true.
       * </pre>
       *
       * <code>int32 sample = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSample() {
        copyOnWrite();
        instance.clearSample();
        return this;
      }

      /**
       * <pre>
       * the smallest value recorded in the first bucket; should be greater than
       * zero.
       * </pre>
       *
       * <code>int32 min = 4;</code>
       * @return The min.
       */
      @java.lang.Override
      public int getMin() {
        return instance.getMin();
      }
      /**
       * <pre>
       * the smallest value recorded in the first bucket; should be greater than
       * zero.
       * </pre>
       *
       * <code>int32 min = 4;</code>
       * @param value The min to set.
       * @return This builder for chaining.
       */
      public Builder setMin(int value) {
        copyOnWrite();
        instance.setMin(value);
        return this;
      }
      /**
       * <pre>
       * the smallest value recorded in the first bucket; should be greater than
       * zero.
       * </pre>
       *
       * <code>int32 min = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMin() {
        copyOnWrite();
        instance.clearMin();
        return this;
      }

      /**
       * <pre>
       * the smallest value recorded in the overflow bucket.
       * </pre>
       *
       * <code>int32 max = 5;</code>
       * @return The max.
       */
      @java.lang.Override
      public int getMax() {
        return instance.getMax();
      }
      /**
       * <pre>
       * the smallest value recorded in the overflow bucket.
       * </pre>
       *
       * <code>int32 max = 5;</code>
       * @param value The max to set.
       * @return This builder for chaining.
       */
      public Builder setMax(int value) {
        copyOnWrite();
        instance.setMax(value);
        return this;
      }
      /**
       * <pre>
       * the smallest value recorded in the overflow bucket.
       * </pre>
       *
       * <code>int32 max = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMax() {
        copyOnWrite();
        instance.clearMax();
        return this;
      }

      /**
       * <pre>
       * number of histogram buckets: Two buckets are used for underflow and
       * overflow, and the remaining buckets cover the range [min, max);
       * numBuckets should be 100 or less.
       * </pre>
       *
       * <code>int32 num_buckets = 6;</code>
       * @return The numBuckets.
       */
      @java.lang.Override
      public int getNumBuckets() {
        return instance.getNumBuckets();
      }
      /**
       * <pre>
       * number of histogram buckets: Two buckets are used for underflow and
       * overflow, and the remaining buckets cover the range [min, max);
       * numBuckets should be 100 or less.
       * </pre>
       *
       * <code>int32 num_buckets = 6;</code>
       * @param value The numBuckets to set.
       * @return This builder for chaining.
       */
      public Builder setNumBuckets(int value) {
        copyOnWrite();
        instance.setNumBuckets(value);
        return this;
      }
      /**
       * <pre>
       * number of histogram buckets: Two buckets are used for underflow and
       * overflow, and the remaining buckets cover the range [min, max);
       * numBuckets should be 100 or less.
       * </pre>
       *
       * <code>int32 num_buckets = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumBuckets() {
        copyOnWrite();
        instance.clearNumBuckets();
        return this;
      }

      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
       */
      @java.lang.Override
      public boolean hasMetadata() {
        return instance.hasMetadata();
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
       */
      @java.lang.Override
      public org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata getMetadata() {
        return instance.getMetadata();
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
       */
      public Builder setMetadata(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata value) {
        copyOnWrite();
        instance.setMetadata(value);
        return this;
        }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
       */
      public Builder setMetadata(
          org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.Builder builderForValue) {
        copyOnWrite();
        instance.setMetadata(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
       */
      public Builder mergeMetadata(org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata value) {
        copyOnWrite();
        instance.mergeMetadata(value);
        return this;
      }
      /**
       * <code>.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;</code>
       */
      public Builder clearMetadata() {  copyOnWrite();
        instance.clearMetadata();
        return this;
      }

      /**
       * <pre>
       * Used for |record_type| == USER_ACTION only.
       * </pre>
       *
       * <code>int64 elapsed_realtime_millis = 8;</code>
       * @return The elapsedRealtimeMillis.
       */
      @java.lang.Override
      public long getElapsedRealtimeMillis() {
        return instance.getElapsedRealtimeMillis();
      }
      /**
       * <pre>
       * Used for |record_type| == USER_ACTION only.
       * </pre>
       *
       * <code>int64 elapsed_realtime_millis = 8;</code>
       * @param value The elapsedRealtimeMillis to set.
       * @return This builder for chaining.
       */
      public Builder setElapsedRealtimeMillis(long value) {
        copyOnWrite();
        instance.setElapsedRealtimeMillis(value);
        return this;
      }
      /**
       * <pre>
       * Used for |record_type| == USER_ACTION only.
       * </pre>
       *
       * <code>int64 elapsed_realtime_millis = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearElapsedRealtimeMillis() {
        copyOnWrite();
        instance.clearElapsedRealtimeMillis();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.chromium.android_webview.proto.HistogramRecord)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "recordType_",
              "histogramName_",
              "sample_",
              "min_",
              "max_",
              "numBuckets_",
              "metadata_",
              "elapsedRealtimeMillis_",
            };
            java.lang.String info =
                "\u0000\b\u0000\u0000\u0001\b\b\u0000\u0000\u0000\u0001\f\u0002\u0208\u0003\u0004" +
                "\u0004\u0004\u0005\u0004\u0006\u0004\u0007\t\b\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.chromium.android_webview.proto.HistogramRecord)
    private static final org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord DEFAULT_INSTANCE;
    static {
      HistogramRecord defaultInstance = new HistogramRecord();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        HistogramRecord.class, defaultInstance);
    }

    public static org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HistogramRecord> PARSER;

    public static com.google.protobuf.Parser<HistogramRecord> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
