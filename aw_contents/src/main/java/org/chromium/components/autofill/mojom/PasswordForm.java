// PasswordForm.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     components/autofill/core/common/mojom/autofill_types.mojom
//

package org.chromium.autofill.mojom;


public final class PasswordForm extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 192;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(192, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

    public static final class Scheme {
        private static final boolean IS_EXTENSIBLE = false;

        public static final int HTML = 0;
        public static final int BASIC = 1; // HTML + 1
        public static final int DIGEST = 2; // BASIC + 1
        public static final int OTHER = 3; // DIGEST + 1
        public static final int USERNAME_ONLY = 4; // OTHER + 1

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 4;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private Scheme() {}
    }

    public static final class Type {
        private static final boolean IS_EXTENSIBLE = false;

        public static final int MANUAL = 0;
        public static final int GENERATED = 1; // MANUAL + 1
        public static final int API = 2; // GENERATED + 1

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 2;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private Type() {}
    }

    public static final class GenerationUploadStatus {
        private static final boolean IS_EXTENSIBLE = false;

        public static final int NO_SIGNAL_SENT = 0;
        public static final int POSITIVE_SIGNAL_SENT = 1; // NO_SIGNAL_SENT + 1
        public static final int NEGATIVE_SIGNAL_SENT = 2; // POSITIVE_SIGNAL_SENT + 1
        public static final int UNKNOWN_STATUS = 10;

        public static boolean isKnownValue(int value) {
            switch (value) {
                case 0:
                case 1:
                case 2:
                case 10:
                    return true;
            }
            return false;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private GenerationUploadStatus() {}
    }
    public int scheme;
    public String signonRealm;
    public org.chromium.url.mojom.Url originWithPath;
    public org.chromium.url.mojom.Url action;
    public String affiliatedWebRealm;
    public org.chromium.mojo_base.mojom.String16 submitElement;
    public org.chromium.mojo_base.mojom.String16 usernameElement;
    public boolean usernameMarkedBySite;
    public org.chromium.mojo_base.mojom.String16 usernameValue;
    public ValueElementPair[] allPossibleUsernames;
    public ValueElementPair[] allPossiblePasswords;
    public boolean formHasAutofilledValue;
    public org.chromium.mojo_base.mojom.String16 passwordElement;
    public org.chromium.mojo_base.mojom.String16 passwordValue;
    public org.chromium.mojo_base.mojom.String16 newPasswordElement;
    public org.chromium.mojo_base.mojom.String16 newPasswordValue;
    public boolean newPasswordMarkedBySite;
    public org.chromium.mojo_base.mojom.String16 confirmationPasswordElement;
    public org.chromium.mojo_base.mojom.Time dateCreated;
    public org.chromium.mojo_base.mojom.Time dateSynced;
    public boolean blacklistedByUser;
    public int type;
    public int timesUsed;
    public FormData formData;
    public int generationUploadStatus;
    public org.chromium.mojo_base.mojom.String16 displayName;
    public org.chromium.url.mojom.Url iconUrl;
    public org.chromium.url.internal.mojom.Origin federationOrigin;
    public boolean skipZeroClick;
    public boolean wasParsedUsingAutofillPredictions;
    public boolean isPublicSuffixMatch;
    public boolean isAffiliationBasedMatch;
    public int submissionEvent;
    public boolean onlyForFallback;

    private PasswordForm(int version) {
        super(STRUCT_SIZE, version);
    }

    public PasswordForm() {
        this(0);
    }

    public static PasswordForm deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static PasswordForm deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static PasswordForm decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        PasswordForm result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new PasswordForm(elementsOrVersion);
                {
                    
                result.scheme = decoder0.readInt(8);
                    PasswordForm.Scheme.validate(result.scheme);
                }
                {
                    
                result.usernameMarkedBySite = decoder0.readBoolean(12, 0);
                }
                {
                    
                result.formHasAutofilledValue = decoder0.readBoolean(12, 1);
                }
                {
                    
                result.newPasswordMarkedBySite = decoder0.readBoolean(12, 2);
                }
                {
                    
                result.blacklistedByUser = decoder0.readBoolean(12, 3);
                }
                {
                    
                result.skipZeroClick = decoder0.readBoolean(12, 4);
                }
                {
                    
                result.wasParsedUsingAutofillPredictions = decoder0.readBoolean(12, 5);
                }
                {
                    
                result.isPublicSuffixMatch = decoder0.readBoolean(12, 6);
                }
                {
                    
                result.isAffiliationBasedMatch = decoder0.readBoolean(12, 7);
                }
                {
                    
                result.onlyForFallback = decoder0.readBoolean(13, 0);
                }
                {
                    
                result.signonRealm = decoder0.readString(16, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.originWithPath = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.action = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                result.affiliatedWebRealm = decoder0.readString(40, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.submitElement = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                result.usernameElement = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.usernameValue = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.allPossibleUsernames = new ValueElementPair[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.allPossibleUsernames[i1] = ValueElementPair.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.allPossiblePasswords = new ValueElementPair[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.allPossiblePasswords[i1] = ValueElementPair.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, false);
                result.passwordElement = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, false);
                result.passwordValue = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, false);
                result.newPasswordElement = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(112, false);
                result.newPasswordValue = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(120, false);
                result.confirmationPasswordElement = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(128, false);
                result.dateCreated = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(136, false);
                result.dateSynced = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {
                    
                result.type = decoder0.readInt(144);
                    PasswordForm.Type.validate(result.type);
                }
                {
                    
                result.timesUsed = decoder0.readInt(148);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(152, false);
                result.formData = FormData.decode(decoder1);
                }
                {
                    
                result.generationUploadStatus = decoder0.readInt(160);
                    PasswordForm.GenerationUploadStatus.validate(result.generationUploadStatus);
                }
                {
                    
                result.submissionEvent = decoder0.readInt(164);
                    SubmissionIndicatorEvent.validate(result.submissionEvent);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(168, false);
                result.displayName = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(176, false);
                result.iconUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(184, false);
                result.federationOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.scheme, 8);
        
        encoder0.encode(this.usernameMarkedBySite, 12, 0);
        
        encoder0.encode(this.formHasAutofilledValue, 12, 1);
        
        encoder0.encode(this.newPasswordMarkedBySite, 12, 2);
        
        encoder0.encode(this.blacklistedByUser, 12, 3);
        
        encoder0.encode(this.skipZeroClick, 12, 4);
        
        encoder0.encode(this.wasParsedUsingAutofillPredictions, 12, 5);
        
        encoder0.encode(this.isPublicSuffixMatch, 12, 6);
        
        encoder0.encode(this.isAffiliationBasedMatch, 12, 7);
        
        encoder0.encode(this.onlyForFallback, 13, 0);
        
        encoder0.encode(this.signonRealm, 16, false);
        
        encoder0.encode(this.originWithPath, 24, false);
        
        encoder0.encode(this.action, 32, false);
        
        encoder0.encode(this.affiliatedWebRealm, 40, false);
        
        encoder0.encode(this.submitElement, 48, false);
        
        encoder0.encode(this.usernameElement, 56, false);
        
        encoder0.encode(this.usernameValue, 64, false);
        
        if (this.allPossibleUsernames == null) {
            encoder0.encodeNullPointer(72, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.allPossibleUsernames.length, 72, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.allPossibleUsernames.length; ++i0) {
                
                encoder1.encode(this.allPossibleUsernames[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.allPossiblePasswords == null) {
            encoder0.encodeNullPointer(80, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.allPossiblePasswords.length, 80, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.allPossiblePasswords.length; ++i0) {
                
                encoder1.encode(this.allPossiblePasswords[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.passwordElement, 88, false);
        
        encoder0.encode(this.passwordValue, 96, false);
        
        encoder0.encode(this.newPasswordElement, 104, false);
        
        encoder0.encode(this.newPasswordValue, 112, false);
        
        encoder0.encode(this.confirmationPasswordElement, 120, false);
        
        encoder0.encode(this.dateCreated, 128, false);
        
        encoder0.encode(this.dateSynced, 136, false);
        
        encoder0.encode(this.type, 144);
        
        encoder0.encode(this.timesUsed, 148);
        
        encoder0.encode(this.formData, 152, false);
        
        encoder0.encode(this.generationUploadStatus, 160);
        
        encoder0.encode(this.submissionEvent, 164);
        
        encoder0.encode(this.displayName, 168, false);
        
        encoder0.encode(this.iconUrl, 176, false);
        
        encoder0.encode(this.federationOrigin, 184, false);
    }
}