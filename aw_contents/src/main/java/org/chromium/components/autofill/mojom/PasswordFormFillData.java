// PasswordFormFillData.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     components/autofill/core/common/mojom/autofill_types.mojom
//

package org.chromium.autofill.mojom;


public final class PasswordFormFillData extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 64;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public int formRendererId;
    public org.chromium.url.mojom.Url origin;
    public org.chromium.url.mojom.Url action;
    public FormFieldData usernameField;
    public FormFieldData passwordField;
    public boolean usernameMayUsePrefilledPlaceholder;
    public String preferredRealm;
    public boolean usesAccountStore;
    public java.util.Map<org.chromium.mojo_base.mojom.String16, PasswordAndMetadata> additionalLogins;
    public boolean waitForUsername;
    public boolean hasRendererIds;

    private PasswordFormFillData(int version) {
        super(STRUCT_SIZE, version);
    }

    public PasswordFormFillData() {
        this(0);
    }

    public static PasswordFormFillData deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static PasswordFormFillData deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static PasswordFormFillData decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        PasswordFormFillData result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new PasswordFormFillData(elementsOrVersion);
                {
                    
                result.formRendererId = decoder0.readInt(8);
                }
                {
                    
                result.usernameMayUsePrefilledPlaceholder = decoder0.readBoolean(12, 0);
                }
                {
                    
                result.usesAccountStore = decoder0.readBoolean(12, 1);
                }
                {
                    
                result.waitForUsername = decoder0.readBoolean(12, 2);
                }
                {
                    
                result.hasRendererIds = decoder0.readBoolean(12, 3);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.origin = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.action = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.usernameField = FormFieldData.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.passwordField = FormFieldData.decode(decoder1);
                }
                {
                    
                result.preferredRealm = decoder0.readString(48, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                {
                    decoder1.readDataHeaderForMap();
                    org.chromium.mojo_base.mojom.String16[] keys0;
                    PasswordAndMetadata[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                keys0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new PasswordAndMetadata[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = PasswordAndMetadata.decode(decoder3);
                            }
                        }
                    }
                    result.additionalLogins = new java.util.HashMap<org.chromium.mojo_base.mojom.String16, PasswordAndMetadata>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.additionalLogins.put(keys0[index0],  values0[index0]);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.formRendererId, 8);
        
        encoder0.encode(this.usernameMayUsePrefilledPlaceholder, 12, 0);
        
        encoder0.encode(this.usesAccountStore, 12, 1);
        
        encoder0.encode(this.waitForUsername, 12, 2);
        
        encoder0.encode(this.hasRendererIds, 12, 3);
        
        encoder0.encode(this.origin, 16, false);
        
        encoder0.encode(this.action, 24, false);
        
        encoder0.encode(this.usernameField, 32, false);
        
        encoder0.encode(this.passwordField, 40, false);
        
        encoder0.encode(this.preferredRealm, 48, false);
        
        if (this.additionalLogins == null) {
            encoder0.encodeNullPointer(56, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(56);
            int size0 = this.additionalLogins.size();
            org.chromium.mojo_base.mojom.String16[] keys0 = new org.chromium.mojo_base.mojom.String16[size0];
            PasswordAndMetadata[] values0 = new PasswordAndMetadata[size0];
            int index0 = 0;
            for (java.util.Map.Entry<org.chromium.mojo_base.mojom.String16, PasswordAndMetadata> entry0 : this.additionalLogins.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
    }
}